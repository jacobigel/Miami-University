<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
    "https://checkstyle.org/dtds/configuration_1_2.dtd">

<!--

  This configuration file was modified for compatibility with jGRASP
  CSD-formatted code and some of the stricter checks were also
  removed. The original comments follow.

  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/third_edition/html/j3TOC.html

    - the Sun Code Conventions at http://www.oracle.com/technetwork/java/codeconv-138413.html

    - the Javadoc guidelines at
      http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html

    - the JDK Api documentation http://docs.oracle.com/javase/6/docs

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  http://checkstyle.sf.net (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.

  Finally, it is worth reading the documentation.

-->

<module name="Checker">
   <!--
       If you set the basedir property below, then all reported file
       names will be relative to the specified directory. See
       http://checkstyle.sourceforge.net/5.x/config.html#Checker

       <property name="basedir" value="${basedir}"/>
   -->

   <module name="LineLength"/>

   <!-- Checks that property files contain the same keys.         -->
   <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
   <module name="Translation"/>
   
   <module name="NewlineAtEndOfFile"/>

   <module name="TreeWalker">
      <property name="tabWidth" value="4" />
   
      <module name="Indentation">
         <property name="basicOffset" value="4"/>
         <property name="caseIndent" value="4"/>
         <property name="throwsIndent" value="4"/>
         <property name="arrayInitIndent" value="4"/>
         <property name="lineWrappingIndentation" value="4"/>
      </module>

     <!-- Don't allow 2 statements on one line.                    -->
	<module name="OneStatementPerLine">
		<property name="treatTryResourcesAsStatement" value="true"/>
	</module>
   
   
      <!-- Checks for Naming Conventions.                  -->
      <!-- See http://checkstyle.sf.net/config_naming.html -->
      <module name="ConstantName"/>
      <module name="LocalFinalVariableName">
		<property name="format" value="^[A-Z][A-Z0-9]*$"/>
	  </module>
      <module name="LocalVariableName"/>
      <module name="MemberName"/>
      <module name="MethodName"/>
      <module name="PackageName"/>
      <module name="ParameterName"/>
      <module name="StaticVariableName"/>
      <module name="TypeName"/>
   
   
      <!-- Checks for Headers                                -->
      <!-- See http://checkstyle.sf.net/config_header.html   -->
      <!-- <module name="Header">                            -->
          <!-- The follow property value demonstrates the ability     -->
          <!-- to have access to ANT properties. In this case it uses -->
          <!-- the ${basedir} property to allow Checkstyle to be run  -->
          <!-- from any directory within a project. See property      -->
          <!-- expansion,                                             -->
          <!-- http://checkstyle.sf.net/config.html#properties        -->
          <!-- <property                                              -->
          <!--     name="headerFile"                                  -->
          <!--     value="${basedir}/java.header"/>                   -->
      <!-- </module> -->
   
      <!-- Following interprets the header file as regular expressions. -->
      <!-- <module name="RegexpHeader"/>                                -->
   
   
      <!-- Checks for imports                              -->
      <!-- See http://checkstyle.sf.net/config_import.html -->
      <module name="AvoidStarImport"/>
      <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
      <module name="RedundantImport"/>
      <module name="UnusedImports"/>
   
   
      <!-- Checks for Size Violations.                    -->
      <!-- See http://checkstyle.sf.net/config_sizes.html -->
      <module name="MethodLength"/>
      <module name="ParameterNumber">
         <property name="max" value="15"/>
         <property name="tokens" value="CTOR_DEF"/>
      </module>
      <module name="ParameterNumber">
         <property name="max" value="10"/>
         <property name="tokens" value="METHOD_DEF"/>
      </module>
   
   
      <!-- Checks for whitespace                               -->
      <!-- See http://checkstyle.sf.net/config_whitespace.html -->
      <module name="EmptyForIteratorPad"/>
      <module name="MethodParamPad"/>
      <module name="NoWhitespaceAfter">
         <property name="tokens" value="BNOT, DEC, DOT,
            INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>
      </module>
      <module name="NoWhitespaceBefore"/>
      <module name="OperatorWrap"/>
      <module name="ParenPad"/>
      <module name="TypecastParenPad"/>
      <module name="WhitespaceAfter"/>
      <module name="WhitespaceAround">
         <property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN,
         BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON,
         DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LCURLY, LE,
         LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,
         LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,
         LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT,
         MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS,
         PLUS_ASSIGN, RCURLY, SL, SLIST, SL_ASSIGN, SR,
         SR_ASSIGN, STAR, STAR_ASSIGN,
         TYPE_EXTENSION_AND"/>
      </module>
   
   
      <!-- Modifier Checks                                    -->
      <!-- See http://checkstyle.sf.net/config_modifiers.html -->
      <module name="ModifierOrder"/>
      <module name="RedundantModifier"/>
   
   
      <!-- Checks for blocks. You know, those {}'s         -->
      <!-- See http://checkstyle.sf.net/config_blocks.html -->
      <module name="AvoidNestedBlocks"/>
      <module name="EmptyBlock">
         <property name="tokens" value="LITERAL_DO, LITERAL_ELSE,
         LITERAL_FINALLY, LITERAL_IF, LITERAL_FOR, LITERAL_TRY,
         LITERAL_WHILE, INSTANCE_INIT, STATIC_INIT"/>
      </module>
      <module name="NeedBraces"/>
   
   
      <!-- Checks for common coding problems               -->
      <!-- See http://checkstyle.sf.net/config_coding.html -->
      <module name="EmptyStatement"/>
      <module name="EqualsHashCode"/>
      <module name="HiddenField"/>
      <module name="IllegalInstantiation"/>
      <module name="InnerAssignment"/>
      <module name="MissingSwitchDefault"/>
      <module name="SimplifyBooleanExpression"/>
      <module name="SimplifyBooleanReturn"/>
   
      <!-- Checks for class design                         -->
      <!-- See http://checkstyle.sf.net/config_design.html -->
      <module name="InterfaceIsType"/>
      <module name="VisibilityModifier">
         <property name="protectedAllowed" value="true"/>
      </module>
   
      <!-- Miscellaneous other checks.                   -->
      <!-- See http://checkstyle.sf.net/config_misc.html -->
      <module name="ArrayTypeStyle"/>
      <module name="TodoComment"/>
      <module name="UpperEll"/>
   
   </module>

</module>
